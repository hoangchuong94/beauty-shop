generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                String        @default(cuid()) @id
  name              String?       @unique 
  email             String?       @unique
  emailVerified     DateTime?     @map("email_verified")
  password          String?
  image             String? 
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  customer          Customer[]
  accounts          Account[]
  sessions          Session[]
  roles             UserRole[]  

  @@map(name: "users")
}

model Role {
  id                String        @default(cuid()) @id
  name              String        @unique
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  users             UserRole[]

  @@map(name: "roles")
}

model UserRole {
  user              User          @relation(fields: [userId], references: [id])
  userId            String        @map("user_id")
  role              Role          @relation(fields: [roleId], references: [id]) 
  roleId            String        @map("role_id")
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")

  @@id([userId, roleId])
  @@map(name: "user_role")
}

model Session {
  id                String        @id @default(cuid())
  userId            String?       @map("user_id")
  sessionToken      String        @unique @map("session_token") @db.Text
  accessToken       String?       @map("access_token") @db.Text
  expires           DateTime
  user              User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")         

  @@map("sessions")
}

model Account {
  id                String        @id @default(cuid())
  userId            String        @map("user_id")
  type              String
  provider          String
  providerAccountId String        @map("provider_account_id")
  refresh_token     String?       @db.Text
  access_token      String?       @db.Text
  expires_at        Int?          
  token_type        String?
  scope             String?
  id_token          String?       @db.Text
  session_state     String?
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationRequest {
  identifier        String
  token             String        @unique
  expires           DateTime
  createdAt         DateTime      @default(now()) @map(name: "created_at")
  updatedAt         DateTime      @updatedAt @map(name: "updated_at")

  @@unique([identifier, token])
  @@map("verification")
}

model Customer {
  id                String         @default(cuid()) @id
  name              String       
  email             String         @unique
  imageUrl          String         @map("image_url") 
  invoices          Invoice[]
  createdAt         DateTime       @default(now()) @map(name: "created_at")
  updatedAt         DateTime       @updatedAt @map(name: "updated_at")    
  user              User           @relation(fields: [userId], references: [id])
  userId            String         @map("user_id")

  @@map(name: "customers")
}

model Invoice {
  id                String         @default(cuid()) @id
  amount            Float          
  status            String
  createdAt         DateTime       @default(now()) @map(name: "created_at")
  updatedAt         DateTime       @updatedAt @map(name: "updated_at")
  customer          Customer       @relation(fields: [customerId], references: [id])
  customerId        String         @map("customer_id")
  
  @@map(name: "invoices")
}

model Category {
  id                String          @default(cuid()) @id
  name              String          @unique
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @updatedAt @map(name: "updated_at")
  product           Product[]
  
  @@map(name: "categories")
}

model Product {
  id                String          @default(cuid()) @id
  name              String?         @unique
  createdAt         DateTime        @default(now()) @map(name: "created_at")
  updatedAt         DateTime        @updatedAt @map(name: "updated_at")
  category          Category        @relation(fields: [categoryId], references: [id])
  categoryId        String          @map("category_id")

  @@map(name: "products")
}
model Revenue {
  id                Int              @default(autoincrement()) @id
  month             String           @unique
  revenue           Float

  @@map(name: "revenues")
}
